{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;;AAEnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAI;;AAE9BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,6BAJD;;AAMAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAe;AACXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AAEH,6BAVD;;AAYAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAMH,yBA5BM,CAAP;AA8BH;;;kDACoBtB,U,EAAW;AAC5BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AAEH,yBALD;AAOH;;;sDACuB;AACpB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\n    const version = 4;\n    const dbName = 'aluraframe';\n\n    let connection = null;\n\n    let close = null;\n\n    export class ConnectionFactory{\n        \n        constructor(){\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\n        }\n        \n        static getConnection(){\n            return new Promise((resolve, reject) =>{\n\n                let openRequest = window.indexedDB.open(dbName, version) ;\n\n                openRequest.onupgradeneeded = e =>{\n\n                    ConnectionFactory._createStores(e.target.result);\n                    \n                };\n\n                openRequest.onsuccess = e => {\n                    if(!connection){\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function(){\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        }\n                    }\n                    resolve(connection);\n\n                };\n\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n\n                    reject(e.target.error.name);\n                };\n\n            });\n\n        }\n        static _createStores(connection){\n            stores.forEach(store => {\n\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, {autoIncrement: true});\n\n            })\n                \n        }\n        static closeConnection(){\n            if(connection){\n                close();\n                connection = null;\n            }\n        }\n    }\n\n\n"]}